{"version":3,"sources":["components/images/cherryblossom.png","components/HomePage.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","Component","Login","props","onSubmit","event","state","username","trim","length","setState","signedIn","preventDefault","handleChange","value","target","name","showHomePage","this","className","src","cherryblossom","alt","height","width","type","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,2C,oMCGpBC,IAAMC,U,eCgEdC,E,kDA9DX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IASVC,SAAW,SAACC,GACL,EAAKC,MAAMC,SAASC,OAAOC,OAAS,GACnC,EAAKC,SAAS,CAACC,UAAU,IAE7BN,EAAMO,kBAdQ,EAmBlBC,aAAe,SAACR,GACZ,IAAMS,EAAQT,EAAMU,OAAOD,MACrBE,EAAOX,EAAMU,OAAOC,KAC1B,EAAKN,SAAL,eACKM,EAAOF,KArBZ,EAAKR,MAAQ,CACTC,SAAU,GACVU,cAAc,EACdN,UAAU,GALA,E,qDA8Bd,OAAKO,KAAKZ,MAAMK,UAAeO,KAAKZ,MAAMW,aAqBtC,6BACI,sCACA,uBAAGE,UAAU,QAAQD,KAAKZ,MAAMC,UAChC,yBAAKa,IAAKC,IAAeC,IAAM,SAASC,OAAQ,GAAIC,MAAO,IAA3D,mBAtBA,6BACI,0BAAMpB,SAAUc,KAAKd,UACrB,4CACA,2BACIqB,KAAK,OACLT,KAAK,WACLF,MAAOI,KAAKZ,MAAMC,SAClBmB,SAAUR,KAAKL,eAEnB,4BAAQM,UAAU,cAAcM,KAAK,UAArC,e,GA1CAzB,IAAMC,W,MCQX0B,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCKcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2e04fa0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cherryblossom.b610ae10.png\";","import React from 'react';\r\nimport './homePage.css';\r\n\r\nclass HomePage extends React.Component {\r\n\r\n    render(){\r\n        \r\n        return (\r\n            \r\n            <div className=\"home\">\r\n                <p>help mee tho</p>\r\n                <table>\r\n                    <tr>\r\n                        <td><img src=\"./images/cherryblossom.png\"> Cherry Blossom </img></td>\r\n                        <td><img src=\"./images/daffodil.png\"> Daffodil </img></td>\r\n                        <td><img src=\"./images/daisy.jpg\"> Daisy </img></td>\r\n                        <td><img src=\"./images/lily.jpg\"> Lily </img></td>\r\n                        \r\n                    </tr>\r\n                    <tr>\r\n                        <td><img src=\"./images/rose.png\"> Rose </img></td>\r\n                        <td><img src=\"./images/sunflower.png\"> Sunflower </img></td>\r\n                        <td><img src=\"./images/tulip.png\"> Tulip </img></td>\r\n                        <td><img src=\"./images/waterlily.png\"> WaterLily </img></td>\r\n                        \r\n                    </tr>\r\n                </table>   \r\n            </div>  \r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport HomePage from './HomePage';\r\nimport './homePage.css';\r\nimport cherryblossom from './images/cherryblossom.png';\r\nclass Login extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            showHomePage: false,\r\n            signedIn: false\r\n        };\r\n\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        if(this.state.username.trim().length > 0){\r\n            this.setState({signedIn: true});\r\n        }\r\n        event.preventDefault();\r\n        \r\n\r\n    }\r\n    \r\n    handleChange = (event) =>{\r\n        const value = event.target.value;\r\n        const name = event.target.name;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n\r\n    }\r\n  \r\n\r\n    render(){\r\n        if((!this.state.signedIn) && (!this.state.showHomePage)){\r\n            return (\r\n                <div>\r\n                    <form onSubmit={this.onSubmit}>\r\n                    <label>Username:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        name=\"username\"\r\n                        value={this.state.username} \r\n                        onChange={this.handleChange}\r\n                    ></input>\r\n                    <button className=\"loginButton\" type=\"submit\">Login</button>                \r\n                    \r\n                    </form>\r\n                    \r\n                    </div>\r\n    \r\n            );\r\n\r\n        }\r\n        return (\r\n            <div>\r\n                <p>Welcome</p>\r\n                <p className=\"user\">{this.state.username}</p>  \r\n                <img src={cherryblossom} alt = \"cherry\" height={50} width={50}>cherry blossom</img>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport Login from './components/Login';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Login />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}